@page "/grassworld"
@implements IDisposable
@inject IJSRuntime JSRuntime
@inject ChunkService ChunkService

@inject IHubContext<GameHub> GameHubContext
@inject PlayerManager PlayerManager
@inject InteropHelper InteropHelper


<h3>3D World of Grass</h3>
<button @onclick="GoFullScreen">Go Full Screen</button>
<div id="fullscreenContainer">
    <canvas id="canvas3D"></canvas>

    <!-- Display coordinates -->
    <div style="position: fixed; top: 10px; left: 10px; z-index: 1000;">
        <span id="cameraPosition" style="font-size: 20px; font-weight: bold; color: white;">Camera Position: (X: , Y: , Z: )</span>
        <span id="log" style="font-size: 20px; font-weight: bold; color: white;">Log: </span>
        <span id="RazorLog" style="font-size: 20px; font-weight: bold; color: white;"> @logMessage</span>

    </div>

    <div id="controls" style="position: fixed; bottom: 10%; left: 10px; z-index: 1000; display: grid; grid-template-columns: repeat(3, auto); grid-gap: 10px;">
        <div style="grid-column: 2 / 3; grid-row: 1 / 2;"><button id="upButton">⬆️</button></div>
        <div style="grid-column: 1 / 2; grid-row: 2 / 3;"><button id="leftButton">⬅️</button></div>
        <div style="grid-column: 3 / 4; grid-row: 2 / 3;"><button id="rightButton">➡️</button></div>
        <div style="grid-column: 2 / 3; grid-row: 3 / 4;"><button id="downButton">⬇️</button></div>
    </div>



</div>





@code {

     /* FYI about static variables
     * In the code you provided, logMessage is declared as a static field. 
     * This means it is shared across all instances of the component and all users in a 
     * Blazor Server application. Consequently, any update to logMessage will affect all users 
     * connected to your Blazor application, and they will all see the same log message. 
     * This behavior is typically not desirable in multi-user scenarios where each user should 
     * have their own state and messages.
    */
    //private static CameraInfo _cameraInfo = new CameraInfo();
    //private static Vector3 _previousCameraPosition = new Vector3(); // Initialize with default or initial camera position
    //private (int, int) _previousChunkCoords = (int.MaxValue, int.MaxValue);

    //private HashSet<string> _visibleChunkIds = new HashSet<string>();

    static string logMessage = ""; //being static is fine for now since it's only me

    Player currentPlayer = new Player();


    protected override async void OnInitialized()
    {
        logMessage = "Waiting for connection...";

        currentPlayer = await InteropHelper.InitializePlayerFromJS();
        Console.WriteLine($"CurrentPlayer: {currentPlayer.ConnectionId}");
        logMessage = "";
        //Need to handle this differently I am guessing. If it's loading chunks
        //This needs to make sure only one player kicks it off.
        await ChunkService.LoadChunksAroundAsync(0, 0, VoxelData.ChunkViewRadius+2);

        // Find a suitable spawn point within the loaded chunks
        Vector3 spawnPoint = ChunkService.FindSpawnPoint();
        currentPlayer.Position = spawnPoint;
        Console.WriteLine($"SpawnPoint: X={spawnPoint.X}, Y={spawnPoint.Y}, Z={spawnPoint.Z}");

        var dotNetObjectReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("GetCameraComponent.registerComponent", dotNetObjectReference);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("requestFullScreen", "fullscreenContainer");
            await JSRuntime.InvokeVoidAsync("initialize3DScene", "canvas3D");
            //Send javascript all the static data that it needs
            await JSRuntime.InvokeVoidAsync("setVoxelData", VoxelData.ChunkWidth, VoxelData.ChunkHeight);
            await JSRuntime.InvokeVoidAsync("adjustCanvasSize", "canvas3D");


            // Set the camera for the player
            await JSRuntime.InvokeVoidAsync("setCameraPosition", currentPlayer.CameraPosition.X, currentPlayer.CameraPosition.Y, currentPlayer.CameraPosition.Z);


            Thread.Sleep(1000);
            await currentPlayer.ChunkManager.LoadAndProcessChunksAroundAsync();
            await JSRuntime.InvokeVoidAsync("addTouchListeners", "controls");
        }
    }

    private async Task GoFullScreen()
    {
        await JSRuntime.InvokeVoidAsync("requestFullScreen", "fullscreenContainer");
    }

    

    public void Dispose()
    {
      
    }
}
